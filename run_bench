#!/bin/bash

# Runs one or more benchmarks.
# Usage: ./run_bench <options> 

# Display information about how this script can be used.
usage()
{
	cat << EOF
Usage: run_bench [OPTION..]
Run scalability benchmarks.

 -b <B>  run the specified benchmark(s) 
         (e.g. big or bang,big) 
         (default: all)  
 -c      perform sanity check
 -h      display this help and exit
 -i <N>  run the benchmark(s) N times 
         (default: 1) 
 -l      list all the available benchmarks
 -m      use the specified mnemonic name for the results
 -n <N>  use N nodes 
         (e.g. 1 or 1..4 or 1,5,6) 
         (default: 0)
 -p      plot diagrams
 -s <N>  use N schedulers 
         (e.g. 1 or 1..4 or 1,5,6) 
         (default: as many as the cores)

For complete documentation, go to ...
EOF
}

# Display a list with all the available benchmarks.
list_bms()
{
	echo -n "Benchmarks:"
	for b in `ls bench`; do
		if [ -d bench/$b ]; then
			echo -n " $b"
		fi
	done
	echo
}

# Run a benchmark.
run_bm()
{
	# Configure the benchmark.
	if [ -f bench/$bench/conf/bench.conf ]; then
		source bench/$bench/conf/bench.conf
	fi

	# Create a directory for this benchmark in the results directory.
	bdir=$dir/$bench
	mkdir -p $bdir

	# Create an output directory for this benchmark.
	odir=$bdir/output
	mkdir -p $odir

	# Create statistics directory for this benchmark.
	sdir=$bdir/statistics
	mkdir -p $sdir

	# Count the nodes.
	NNODES=`echo $NODES | tr "," "\n" | wc -l`

	# For each OTP.
	for otp in $OTPS; do

		otpl=${otp%%=*}
		otpv=${otp##*=}

		# For each VM argument set.
		for args in $ARGS; do	
			
			argsl=${args%%=*}
			argsv=${args##*=}

			IFS=$OLD_IFS
			n=`echo $NDS | tr "," "\n" | tail -n 1`
			IFS=$MY_IFS
			if [ "$n" -gt "$NNODES" ]; then
				n=$NNODES
			fi
			# For each number of schedulers.
			for s in $SCS; do
				WHAT="sched"
				do_run_bm
			done

			IFS=$OLD_IFS
			s=`echo $SCS | tr "," "\n" | tail -n 1`
			IFS=$MY_IFS
			# For each number of nodes.
			for n in $NDS; do
				if [ "$n" -gt "$NNODES" ]; then
					continue
				fi
				WHAT="node"
				do_run_bm
			done
		done
	done
}

do_run_bm()
{

	IFS=$OLD_IFS
	
	# Run the pre_bench script (if there is one).
	if [ -f bench/$bench/conf/pre_bench ]; then
		bench/$bench/conf/pre_bench $s "$otpv" "$argsv"	
	fi

	# Create the configuration file that is necessary for running the 
	# benchmark.
	benchdir=`cd bench/$bench; pwd`

	if [ -z $otpv ]; then	
		erl="erl"
	else
		erl="$otpv/bin/erl"
	fi

cat > scratch/run_bench.config << EOF
{bench, $bench}.
{otp, "$otpv"}.
{args, "$argsv $EXTRA_ARGS +S$s:$s -noshell -pa $CODE_PATH suite/ebin bench/$bench/ebin -setcookie $COOKIE" }.
{nnodes, $n}.
{nschedulers, $s}.
{nodes, [$NODES]}.
{iterations, $ITERATIONS}.
{outfile, "$odir/$otpl.$argsl.$s.$n.output"}.
{statfile, "$sdir/$otpl.$argsl.$WHAT.time"}.
{datadir, "$benchdir/data"}.
{what, $WHAT}.
EOF

	# Run the benchmark.
	hostname=`hostname -f`
		${erl} ${argsv} ${EXTRA_ARGS} -setcookie "${COOKIE}" +S$s:$s \
		-name master@${hostname} -noshell -pa ${CODE_PATH} \
		suite/ebin bench/$bench/ebin -s run_bench main -s erlang \
		halt

	# Run the post_bench script (if there is one).
	if [ -f bench/$bench/conf/post_bench ]; then
		bench/$bench/conf/post_bench $s "$otpv" "$argsv"
	fi

	IFS=$MY_IFS
}

# Plot diagrams for a benchmark.
plot_bm()
{

	# Create a diagrams directory.
	ddir=$bdir/diagrams
	mkdir -p $ddir

	# Plot time diagrams.
	if [ "$NNDS" -gt "1" ]; then
		WHAT=node.time
		plot
	fi
	if [ "$NSCS" -gt "1" ]; then
		WHAT=sched.time
		plot
	fi

	# Plot speedup diagrams.
	if [ "$NNDS" -gt "1" ]; then
		for file in `ls $sdir/*.*.node.time`; do
			fn=`basename $file .node.time`
			cat $sdir/$fn.node.time | ./suite/speedup.awk >> $sdir/$fn.node.speedup
		done
		WHAT=node.speedup
		plot
	fi
	if [ "$NSCS" -gt "1" ]; then
		for file in `ls $sdir/*.*.sched.time`; do
			fn=`basename $file .sched.time`
			cat $sdir/$fn.sched.time | ./suite/speedup.awk >> $sdir/$fn.sched.speedup
		done
		WHAT=sched.speedup
		plot	
	fi
}

# Plot.
plot()
{

	# Plot a diagram for each OTP-VM args combination.
	for file in `ls $sdir/*.$WHAT`; do
		fn=`basename $file .$WHAT`
		otp=${fn%%.*}
		args=${fn##*.}
		PARGS="$PARGS $args"
		POTPS="$POTPS $otp"
		./suite/plot.pl "$bench - $otp - $args" \
		"$sdir/$fn.$WHAT" \
		"$ddir/$fn.$WHAT.ps"
	done

	POTPS=`echo $POTPS | tr " " "\n" | sort -du | tr "\n" " "`
	PARGS=`echo $PARGS | tr " " "\n" | sort -du | tr "\n" " "`
	NOTPS=`echo $POTPS | wc -w`
	NARGS=`echo $PARGS | wc -w`

	# Plot a diagram for each OTP.
	if [ $NARGS -gt 1 ]; then
		for otp in $POTPS; do
			for file in `ls $sdir/$otp.*.$WHAT`; do
				fn=`basename $file .$WHAT`
				otp=${fn%%.*}
				args=${fn##*.}
				cat $sdir/$fn.$WHAT | ./suite/inject.awk \
				what=$args > $sdir/$fn.tmp
			done
			cat `ls $sdir/$otp.*.tmp` | sort -g | ./suite/merge.awk \
			> $sdir/$otp.$WHAT
			./suite/plot.pl "$bench - $otp" \
			"$sdir/$otp.$WHAT" \
			"$ddir/$otp.$WHAT.ps"
		done
	fi

	# Plot a diagram for each VM args set.
	if [ $NOTPS -gt 1 ]; then
		for args in $PARGS; do
			for file in `ls $sdir/*.$args.$WHAT`; do
				fn=`basename $file .$WHAT`
				otp=${fn%%.*}
				args=${fn##*.}
				cat $sdir/$fn.$WHAT | ./suite/inject.awk \
				what=$otp > $sdir/$fn.tmp
			done
			cat `ls $sdir/*.$args.tmp` | sort -g | \
			./suite/merge.awk > $sdir/$args.$WHAT
			./suite/plot.pl "$bench - $args" \
			"$sdir/$args.$WHAT" \
			"$ddir/$args.$WHAT.ps"
		done
	fi
	rm -rf $sdir/*.tmp
}

while getopts ":b:hls:n:pi:" opt; do
	case $opt in
		b)
			BMS=$OPTARG
			;;
		c)
			SANITY_CHECK=1
			;;
		h)
			usage
			exit 0
			;;
		i)
			ITERATIONS=$OPTARG
			;;
		l)
			list_bms
			exit 0
			;;
		m)
			MNEMONIC_NAME=$OPTARG
			;;
		n)
			NDS=$OPTARG
			;;
		p)
			PLOT=1
			;;
		s)
			SCS=$OPTARG
			;;
		\?)	
			echo "Invalid option: -$OPTARG"	
			exit 1
			;;
	esac
done

if [ -z $SCS ]; then
	SCS=`cat /proc/cpuinfo | grep processor | wc -l`
fi
if [[ "$SCS" =~ .*\.\..* ]]; then
	min=`echo $SCS | cut -d'.' -f1`
	max=`echo $SCS | cut -d'.' -f3`
	SCS=`seq $min $max`
else
	SCS=`echo $SCS | sed 's/,/ /g'`
fi 
x=`echo $SCS | tr " " "\n" | wc -l`
if [ $x -ne 1 ]; then
	SCS="1 $SCS"
fi
SCS=`echo $SCS | tr " " "\n" | sort -gu | tr "\n" ","`
L=${#SCS}
L=$(( L - 1 ))
SCS=${SCS:0:L}
NSCS=`echo $SCS | tr "," "\n" | wc -l`

if [ -z $NDS ]; then
	NDS=0
fi
if [[ "$NDS" =~ .*\.\..* ]]; then
    min=`echo $NDS | cut -d'.' -f1`
    max=`echo $NDS | cut -d'.' -f3`
    NDS=`seq $min $max`
else
    NDS=`echo $NDS | sed 's/,/ /g'`
fi
NDS=`echo $NDS | tr " " "\n" | sort -gu | tr "\n" ","`
L=${#NDS}
L=$(( L - 1 ))
NDS=${NDS:0:L}
NNDS=`echo $NDS | tr "," "\n" | wc -l`

if [ -z $ITERATIONS ]; then
	ITERATIONS=1
fi
 
source conf/suite.conf

DEF_OTPS=${OTPS:-"DEFOTP="}
DEF_ARGS=${ARGS:-"DEFARGS= "}
DEF_COOKIE=${COOKIE:-"scala_cookie"}

if [ -z "$BMS" ]; then
    for b in `ls bench`; do
        if [ -d bench/$b ]; then
			if [ -z "$BMS" ]; then
				BMS="$b"
			else
				BMS="$BMS,$b"
			fi
        fi
    done
fi

OLD_IFS=$IFS
MY_IFS=$','

if [ -z $MNEMONIC_NAME ]; then
	NOW=`date +%d.%m.%y.-%H.%M.%S`
	dir=results/$NOW
else
	if [ -e results/$MNEMONIC_NAME ]; then
		rm -rf results/$MNEMONIC_NAME
	fi
	dir=results/$MNEMONIC_NAME
fi
mkdir $dir

IFS=$MY_IFS
for bench in $BMS; do
	if [ ! -d bench/$bench ]; then
        echo "Unknown benchmark: $bench"
    elif [[ "$IGNORE_BENCH" =~ "$bench" ]]; then
        echo "Ignored benchmark: $bench"
    else
		echo "Benchmark: $bench"
		OTPS=$DEF_OTPS
		ARGS=$DEF_ARGS
		COOKIE=$DEF_COOKIE
		CODE_PATH=
		EXTRA_ARGS=
		IFS=$MY_IFS
		echo "Running..."
		run_bm
		IFS=$OLD_IFS
		if [ "$SANITY_CHECK" == "1" ]; then
			echo "Performing sanity check..."
			check_bm
		fi
		if [[ ( "$PLOT" == "1" ) && ( ( "$NNDS" -ne "1" ) || ( "$NSCS" -ne "1" ) ) ]]; then
			echo "Plotting..."
			plot_bm
		fi
	fi
	IFS=$MY_IFS
done

